import { DeploymentStrategy } from "./DeploymentStrategy";
import { Diamond } from "../core/Diamond";
import { FacetCuts } from "../types";
export declare class BaseDeploymentStrategy implements DeploymentStrategy {
    protected verbose: boolean;
    constructor(verbose?: boolean);
    preDeployDiamond(diamond: Diamond): Promise<void>;
    protected preDeployDiamondTasks(diamond: Diamond): Promise<void>;
    deployDiamond(diamond: Diamond): Promise<void>;
    protected deployDiamondTasks(diamond: Diamond): Promise<void>;
    postDeployDiamond(diamond: Diamond): Promise<void>;
    protected postDeployDiamondTasks(diamond: Diamond): Promise<void>;
    preDeployFacets(diamond: Diamond): Promise<void>;
    protected preDeployFacetsTasks(diamond: Diamond): Promise<void>;
    deployFacets(diamond: Diamond): Promise<void>;
    protected deployFacetsTasks(diamond: Diamond): Promise<void>;
    postDeployFacets(diamond: Diamond): Promise<void>;
    protected postDeployFacetsTasks(diamond: Diamond): Promise<void>;
    preUpdateFunctionSelectorRegistry(diamond: Diamond): Promise<void>;
    protected preUpdateFunctionSelectorRegistryTasks(diamond: Diamond): Promise<void>;
    updateFunctionSelectorRegistry(diamond: Diamond): Promise<void>;
    protected updateFunctionSelectorRegistryTasks(diamond: Diamond): Promise<void>;
    postUpdateFunctionSelectorRegistry(diamond: Diamond): Promise<void>;
    prePerformDiamondCut(diamond: Diamond): Promise<void>;
    protected prePerformDiamondCutTasks(diamond: Diamond): Promise<void>;
    performDiamondCut(diamond: Diamond): Promise<void>;
    protected performDiamondCutTasks(diamond: Diamond): Promise<void>;
    postPerformDiamondCut(diamond: Diamond): Promise<void>;
    protected postPerformDiamondCutTasks(diamond: Diamond): Promise<void>;
    getInitCalldata(diamond: Diamond): Promise<[string, string]>;
    getFacetCuts(diamond: Diamond): Promise<FacetCuts>;
    validateNoOrphanedSelectors(facetCuts: FacetCuts): Promise<void>;
    postDiamondCutDeployedDataUpdate(diamond: Diamond, txHash: string): Promise<void>;
    preRunPostDeployCallbacks(diamond: Diamond): Promise<void>;
    runPostDeployCallbacks(diamond: Diamond): Promise<void>;
    protected runPostDeployCallbacksTasks(diamond: Diamond): Promise<void>;
    postRunPostDeployCallbacks(diamond: Diamond): Promise<void>;
    protected postRunPostDeployCallbacksTasks(diamond: Diamond): Promise<void>;
}
//# sourceMappingURL=BaseDeploymentStrategy.d.ts.map