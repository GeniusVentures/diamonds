/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface TestFacet2Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchSetValues"
      | "getCounter"
      | "getTestValue"
      | "incrementCounter"
      | "multiplyTestValue"
      | "newTestFunction"
      | "resetTestValue"
      | "setTestValue"
      | "supportsInterface"
      | "testFunction"
      | "testFunction2"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "CounterUpdated" | "TestEventV2"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchSetValues",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTestValue",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiplyTestValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "newTestFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetTestValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTestValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "testFunction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testFunction2",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "batchSetValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiplyTestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newTestFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetTestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testFunction2",
    data: BytesLike
  ): Result;
}

export namespace CounterUpdatedEvent {
  export type InputTuple = [newValue: BigNumberish];
  export type OutputTuple = [newValue: bigint];
  export interface OutputObject {
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TestEventV2Event {
  export type InputTuple = [
    user: AddressLike,
    value: BigNumberish,
    message: string
  ];
  export type OutputTuple = [user: string, value: bigint, message: string];
  export interface OutputObject {
    user: string;
    value: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface TestFacet2 extends BaseContract {
  connect(runner?: ContractRunner | null): TestFacet2;
  waitForDeployment(): Promise<this>;

  interface: TestFacet2Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchSetValues: TypedContractMethod<
    [users: AddressLike[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getCounter: TypedContractMethod<[], [bigint], "view">;

  getTestValue: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  incrementCounter: TypedContractMethod<[], [void], "nonpayable">;

  multiplyTestValue: TypedContractMethod<
    [multiplier: BigNumberish],
    [void],
    "nonpayable"
  >;

  newTestFunction: TypedContractMethod<[], [string], "view">;

  resetTestValue: TypedContractMethod<[], [void], "nonpayable">;

  setTestValue: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  testFunction: TypedContractMethod<[], [string], "view">;

  testFunction2: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchSetValues"
  ): TypedContractMethod<
    [users: AddressLike[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTestValue"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "incrementCounter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "multiplyTestValue"
  ): TypedContractMethod<[multiplier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "newTestFunction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resetTestValue"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTestValue"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "testFunction"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "testFunction2"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "CounterUpdated"
  ): TypedContractEvent<
    CounterUpdatedEvent.InputTuple,
    CounterUpdatedEvent.OutputTuple,
    CounterUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TestEventV2"
  ): TypedContractEvent<
    TestEventV2Event.InputTuple,
    TestEventV2Event.OutputTuple,
    TestEventV2Event.OutputObject
  >;

  filters: {
    "CounterUpdated(uint256)": TypedContractEvent<
      CounterUpdatedEvent.InputTuple,
      CounterUpdatedEvent.OutputTuple,
      CounterUpdatedEvent.OutputObject
    >;
    CounterUpdated: TypedContractEvent<
      CounterUpdatedEvent.InputTuple,
      CounterUpdatedEvent.OutputTuple,
      CounterUpdatedEvent.OutputObject
    >;

    "TestEventV2(address,uint256,string)": TypedContractEvent<
      TestEventV2Event.InputTuple,
      TestEventV2Event.OutputTuple,
      TestEventV2Event.OutputObject
    >;
    TestEventV2: TypedContractEvent<
      TestEventV2Event.InputTuple,
      TestEventV2Event.OutputTuple,
      TestEventV2Event.OutputObject
    >;
  };
}
