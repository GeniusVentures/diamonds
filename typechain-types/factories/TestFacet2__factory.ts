/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { TestFacet2, TestFacet2Interface } from "../TestFacet2";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "newValue",
        type: "uint256",
      },
    ],
    name: "CounterUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "TestEventV2",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "users",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "batchSetValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getTestValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "incrementCounter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "multiplier",
        type: "uint256",
      },
    ],
    name: "multiplyTestValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "newTestFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "resetTestValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "setTestValue",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "testFunction",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "testFunction2",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610738806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638ada066e116100715780638ada066e1461014e5780638c0eec7d14610156578063b8fb063e14610169578063e16b4a9b146101a4578063eebb1770146101dd578063f54e39e11461021657600080fd5b806301ffc9a7146100ae5780631a4859d5146100e7578063359601051461011e5780635b34b966146101335780637979c4a11461013b575b600080fd5b6100d26100bc366004610507565b6001600160e01b0319166301ffc9a760e01b1490565b60405190151581526020015b60405180910390f35b6101106100f5366004610538565b6001600160a01b031660009081526020819052604090205490565b6040519081526020016100de565b61013161012c366004610561565b61021e565b005b610131610282565b6101316101493660046105c6565b6102d4565b600154610110565b610131610164366004610561565b610437565b60408051808201909152601681527515195cdd08199d5b98dd1a5bdb880c8818d85b1b195960521b60208201525b6040516100de9190610632565b60408051808201909152601781527f546573742066756e6374696f6e2076322063616c6c65640000000000000000006020820152610197565b60408051808201909152601781527f4e657720746573742066756e6374696f6e20696e2076320000000000000000006020820152610197565b6101316104b4565b3360008181526020819052604090819020839055516000805160206106e38339815191529061027790848152604060208201819052600f908201526e2b30b63ab29039b2ba1034b7103b1960891b606082015260800190565b60405180910390a250565b6001805490600061029283610696565b91905055507f4785d80d2593e2cb7a3331d31eb5106408bdde2aab0db9e9b616b036a1b6039d6001546040516102ca91815260200190565b60405180910390a1565b8281146103205760405162461bcd60e51b8152602060048201526016602482015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b604482015260640160405180910390fd5b60005b838110156104305782828281811061033d5761033d6106af565b90506020020135600080878785818110610359576103596106af565b905060200201602081019061036e9190610538565b6001600160a01b0316815260208101919091526040016000205584848281811061039a5761039a6106af565b90506020020160208101906103af9190610538565b6001600160a01b03166000805160206106e38339815191528484848181106103d9576103d96106af565b90506020020135604051610416918152604060208201819052600f908201526e10985d18da081d985b1d59481cd95d608a1b606082015260800190565b60405180910390a28061042881610696565b915050610323565b5050505050565b33600090815260208190526040812080548392906104569084906106c5565b909155505033600081815260208190526040908190205490516000805160206106e383398151915291610277919081526040602082018190526010908201526f15985b1d59481b5d5b1d1a5c1b1a595960821b606082015260800190565b336000818152602081815260408083208390558051928352908201819052600b828201526a15985b1d59481c995cd95d60aa1b6060830152516000805160206106e38339815191529181900360800190a2565b60006020828403121561051957600080fd5b81356001600160e01b03198116811461053157600080fd5b9392505050565b60006020828403121561054a57600080fd5b81356001600160a01b038116811461053157600080fd5b60006020828403121561057357600080fd5b5035919050565b60008083601f84011261058c57600080fd5b50813567ffffffffffffffff8111156105a457600080fd5b6020830191508360208260051b85010111156105bf57600080fd5b9250929050565b600080600080604085870312156105dc57600080fd5b843567ffffffffffffffff808211156105f457600080fd5b6106008883890161057a565b9096509450602087013591508082111561061957600080fd5b506106268782880161057a565b95989497509550505050565b600060208083528351808285015260005b8181101561065f57858101830151858201604001528201610643565b506000604082860101526040601f19601f8301168501019250505092915050565b634e487b7160e01b600052601160045260246000fd5b6000600182016106a8576106a8610680565b5060010190565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176106dc576106dc610680565b9291505056fe65747d987c30e97246875a756afa0b6599a057ad5a0943e4fa8aed7c5caf1338a2646970667358221220a537b3feb20d51036300d9524ebff65b84280c1ca02c946806057c9cada912e864736f6c63430008110033";

type TestFacet2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestFacet2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestFacet2__factory extends ContractFactory {
  constructor(...args: TestFacet2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TestFacet2 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestFacet2__factory {
    return super.connect(runner) as TestFacet2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestFacet2Interface {
    return new Interface(_abi) as TestFacet2Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestFacet2 {
    return new Contract(address, _abi, runner) as unknown as TestFacet2;
  }
}
