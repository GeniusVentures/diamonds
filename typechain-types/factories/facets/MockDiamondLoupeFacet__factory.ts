/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  MockDiamondLoupeFacet,
  MockDiamondLoupeFacetInterface,
} from "../../facets/MockDiamondLoupeFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "_functionSelector",
        type: "bytes4",
      },
    ],
    name: "facetAddress",
    outputs: [
      {
        internalType: "address",
        name: "facetAddress_",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facetAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "facetAddresses_",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_facet",
        type: "address",
      },
    ],
    name: "facetFunctionSelectors",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "facetFunctionSelectors_",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "facets",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "facetAddress",
            type: "address",
          },
          {
            internalType: "bytes4[]",
            name: "functionSelectors",
            type: "bytes4[]",
          },
        ],
        internalType: "struct IDiamondLoupe.Facet[]",
        name: "facets_",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061087b806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806352ef6b2c146100515780637a0ed6271461006f578063adfca15e14610084578063cdffacc6146100a4575b600080fd5b6100596100cf565b60405161006691906106b3565b60405180910390f35b61007761016e565b6040516100669190610745565b6100976100923660046107c2565b610467565b60405161006691906107f2565b6100b76100b2366004610805565b610605565b6040516001600160a01b039091168152602001610066565b6040805160028082526060808301845292602083019080368337019050509050731234567890123456789012345678901234567890816000815181106101175761011761082f565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061014b5761014b61082f565b60200260200101906001600160a01b031690816001600160a01b03168152505090565b6040805160028082526060828101909352816020015b604080518082019091526000815260606020820152815260200190600190039081610184579050509050731234567890123456789012345678901234567890816000815181106101d6576101d661082f565b60209081029190910101516001600160a01b039190911690526040805160018082528183019092529081602001602082028036833701905050816000815181106102225761022261082f565b6020026020010151602001819052507f1f931c1c950c3694dcff4e081cc94ed9dde76d076c1bc49ed7e3c8cb0db670f9816000815181106102655761026561082f565b6020026020010151602001516000815181106102835761028361082f565b60200260200101906001600160e01b03191690816001600160e01b0319168152505030816001815181106102b9576102b961082f565b6020908102919091018101516001600160a01b039290921690915260408051600480825260a0820190925291820160808036833701905050816001815181106103045761030461082f565b602002602001015160200181905250637a0ed62760e01b8160018151811061032e5761032e61082f565b60200260200101516020015160008151811061034c5761034c61082f565b6001600160e01b03199092166020928302919091019091015280516356fe50af60e11b90829060019081106103835761038361082f565b6020026020010151602001516001815181106103a1576103a161082f565b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060019081106103d8576103d861082f565b6020026020010151602001516002815181106103f6576103f661082f565b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b908290600190811061042d5761042d61082f565b60200260200101516020015160038151811061044b5761044b61082f565b6001600160e01b03199092166020928302919091019091015290565b606073123456789012345678901234567890123456788f196001600160a01b038316016105005760408051600180825281830190925290602080830190803683370190505090507f1f931c1c950c3694dcff4e081cc94ed9dde76d076c1bc49ed7e3c8cb0db670f9816000815181106104e2576104e261082f565b6001600160e01b031990921660209283029190910190910152919050565b306001600160a01b038316036105f15760408051600480825260a082019092529060208201608080368337019050509050637a0ed62760e01b8160008151811061054c5761054c61082f565b6001600160e01b03199092166020928302919091019091015280516356fe50af60e11b90829060019081106105835761058361082f565b6001600160e01b03199092166020928302919091019091015280516314bbdacb60e21b90829060029081106105ba576105ba61082f565b6001600160e01b03199092166020928302919091019091015280516366ffd66360e11b90829060039081106104e2576104e261082f565b505060408051600081526020810190915290565b600063381b38f960e21b6001600160e01b031983160161063a5750731234567890123456789012345678901234567890919050565b6001600160e01b03198216637a0ed62760e01b148061066957506001600160e01b031982166356fe50af60e11b145b8061068457506001600160e01b031982166314bbdacb60e21b145b8061069f57506001600160e01b031982166366ffd66360e11b145b156106ab575030919050565b506000919050565b6020808252825182820181905260009190848201906040850190845b818110156106f45783516001600160a01b0316835292840192918401916001016106cf565b50909695505050505050565b600081518084526020808501945080840160005b8381101561073a5781516001600160e01b03191687529582019590820190600101610714565b509495945050505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156107b457888303603f19018552815180516001600160a01b031684528701518784018790526107a187850182610700565b958801959350509086019060010161076c565b509098975050505050505050565b6000602082840312156107d457600080fd5b81356001600160a01b03811681146107eb57600080fd5b9392505050565b6020815260006107eb6020830184610700565b60006020828403121561081757600080fd5b81356001600160e01b0319811681146107eb57600080fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220301d24c9bb77265fe07d88739140ef2b59e5a942c8d9cea9e93bd5103ebec4bb64736f6c63430008110033";

type MockDiamondLoupeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDiamondLoupeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDiamondLoupeFacet__factory extends ContractFactory {
  constructor(...args: MockDiamondLoupeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockDiamondLoupeFacet & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockDiamondLoupeFacet__factory {
    return super.connect(runner) as MockDiamondLoupeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDiamondLoupeFacetInterface {
    return new Interface(_abi) as MockDiamondLoupeFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockDiamondLoupeFacet {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockDiamondLoupeFacet;
  }
}
